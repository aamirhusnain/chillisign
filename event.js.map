{"version":3,"file":"event.js","mappings":"AAoDAA,OAAOC,QAAQC,UAAU,kBAvCzB,SAAwBC,GACpB,IAAIC,EAAUJ,OAAOK,2BACrB,IAAIC,EAAOC,aAAaC,QAAQ,qBACpB,MAARF,GAAwBG,MAARH,GAAsBA,GAQtCF,EAAU,CACNM,KAAMV,OAAOW,aAAaC,4BAA4BC,qBACtDT,QAAS,8CACTU,KAAM,aACNC,YAAY,GAIhBf,OAAOgB,QAAQC,QAAQC,KAAKC,KAAKC,kBAC7Bd,EACA,CAAEe,aAAcrB,OAAOsB,aAAaC,OACpC,SAAUC,GACFA,EAAYC,OAAWzB,OAAO0B,kBAAkBC,SAKxD,KAxBJvB,EAAU,CACNM,KAAMV,OAAOW,aAAaC,4BAA4BC,qBACtDT,QAAS,0EACTU,KAAM,aACNC,YAAY,GAyBpBf,OAAOgB,QAAQC,QAAQC,KAAKU,qBAAqBC,aAAa,gCAAiCzB,GAG/FD,EAAS2B,WACb","sources":["webpack://office-addin-taskpane-react/./src/commands/event.js"],"sourcesContent":["\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// Contains code for event-based activation on Outlook on web, on Windows, and on Mac (new UI preview).\r\n\r\n/**\r\n * Checks if signature exists.\r\n * If not, displays the information bar for user.\r\n * If exists, insert signature into new item (appointment or message).\r\n * @param {*} eventObj Office event object\r\n * @returns\r\n */\r\nfunction checkSignature(eventObj) {\r\n    let message = Office.NotificationMessageDetails;\r\n    var html = localStorage.getItem(\"selectedSignature\");\r\n    if (html == null || html == undefined || !html) {\r\n        message = {\r\n            type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n            message: \"Please sign in using taskpane Signature will insert work Automatically.\",\r\n            icon: \"Icon.80x80\",\r\n            persistent: true,\r\n        };\r\n    } else {\r\n        message = {\r\n            type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n            message: \"Signature set successfully from Chillisgin.\",\r\n            icon: \"Icon.80x80\",\r\n            persistent: true,\r\n        };\r\n\r\n        //const setSignature = (html, callback) => {\r\n        Office.context.mailbox.item.body.setSignatureAsync(\r\n            html,\r\n            { coercionType: Office.CoercionType.Html },\r\n            function (asyncResult) {\r\n                if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\r\n                    // callback(null, \"Signature set successfully\");\r\n                } else {\r\n                    // callback(asyncResult.error.message, null);\r\n                }\r\n            }\r\n        );\r\n    }\r\n    //};\r\n    // Show a notification message.\r\n    Office.context.mailbox.item.notificationMessages.replaceAsync(\"ActionPerformanceNotification\", message);\r\n\r\n    // Be sure to indicate when the add-in command function is complete.\r\n    eventObj.completed();\r\n}\r\n\r\nOffice.actions.associate(\"checkSignature\", checkSignature);"],"names":["Office","actions","associate","eventObj","message","NotificationMessageDetails","html","localStorage","getItem","undefined","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","context","mailbox","item","body","setSignatureAsync","coercionType","CoercionType","Html","asyncResult","status","AsyncResultStatus","Succeeded","notificationMessages","replaceAsync","completed"],"sourceRoot":""}