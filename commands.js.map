{"version":3,"file":"commands.js","mappings":"AAOAA,OAAOC,SAAQ,WACb,IAuBFD,OAAOE,QAAQC,UAAU,UAhBzB,SAAgBC,GACd,IAAMC,EAA6C,CACjDC,KAAMN,OAAOO,aAAaC,4BAA4BC,qBACtDJ,QAAS,oBACTK,KAAM,aACNC,YAAY,GAIdX,OAAOY,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,gCAAiCX,GAG/FD,EAAMa,WACR,IAyDAjB,OAAOE,QAAQC,UAAU,kBAvCzB,SAAwBe,GACtB,IAAIb,EACAc,EAAOC,aAAaC,QAAQ,qBACpB,MAARF,GAAwBG,MAARH,GAAsBA,GAQxCd,EAAU,CACRC,KAAMN,OAAOO,aAAaC,4BAA4BC,qBACtDJ,QAAS,8CACTK,KAAM,aACNC,YAAY,GAIdX,OAAOY,QAAQC,QAAQC,KAAKS,KAAKC,kBAC/BL,EACA,CAAEM,aAAczB,OAAO0B,aAAaC,OACpC,SAAUC,GACJA,EAAYC,OAAW7B,OAAO8B,kBAAkBC,SAKtD,KAxBF1B,EAAU,CACRC,KAAMN,OAAOO,aAAaC,4BAA4BC,qBACtDJ,QAAS,0EACTK,KAAM,aACNC,YAAY,GAyBhBX,OAAOY,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,gCAAiCX,GAG/Fa,EAASD,WACX","sources":["webpack://office-addin-taskpane-react/./src/commands/commands.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called.\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event\n */\nfunction action(event: Office.AddinCommands.Event) {\n  const message: Office.NotificationMessageDetails = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message.\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"ActionPerformanceNotification\", message);\n\n  // Be sure to indicate when the add-in command function is complete.\n  event.completed();\n}\n\n// Register the function with Office.\nOffice.actions.associate(\"action\", action);\n\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// Contains code for event-based activation on Outlook on web, on Windows, and on Mac (new UI preview).\n\n/**\n * Checks if signature exists.\n * If not, displays the information bar for user.\n * If exists, insert signature into new item (appointment or message).\n * @param {*} eventObj Office event object\n * @returns\n */\nfunction checkSignature(eventObj: any) {\n  let message: Office.NotificationMessageDetails;\n  var html = localStorage.getItem(\"selectedSignature\");\n  if (html == null || html == undefined || !html) {\n    message = {\n      type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n      message: \"Please sign in using taskpane Signature will insert work Automatically.\",\n      icon: \"Icon.80x80\",\n      persistent: true,\n    };\n  } else {\n    message = {\n      type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n      message: \"Signature set successfully from Chillisgin.\",\n      icon: \"Icon.80x80\",\n      persistent: true,\n    };\n\n    //const setSignature = (html, callback) => {\n    Office.context.mailbox.item.body.setSignatureAsync(\n      html,\n      { coercionType: Office.CoercionType.Html },\n      function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n          // callback(null, \"Signature set successfully\");\n        } else {\n          // callback(asyncResult.error.message, null);\n        }\n      }\n    );\n  }\n  //};\n  // Show a notification message.\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"ActionPerformanceNotification\", message);\n\n  // Be sure to indicate when the add-in command function is complete.\n  eventObj.completed();\n}\n\nOffice.actions.associate(\"checkSignature\", checkSignature);\n"],"names":["Office","onReady","actions","associate","event","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","context","mailbox","item","notificationMessages","replaceAsync","completed","eventObj","html","localStorage","getItem","undefined","body","setSignatureAsync","coercionType","CoercionType","Html","asyncResult","status","AsyncResultStatus","Succeeded"],"sourceRoot":""}